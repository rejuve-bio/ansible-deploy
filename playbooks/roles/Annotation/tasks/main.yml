- name: Fix dpkg if interrupted
  command: dpkg --configure -a
  ignore_errors: yes
  tags: annotation
  become: yes

- name: Update apt cache
  apt:
    update_cache: yes
  become: yes
  tags: annotation

- name: Gather installed packages facts
  ansible.builtin.package_facts:
    manager: auto
  tags: annotation

- name: Install required system packages  
  become: yes
  apt:
    name: >
      {{
        ['docker-compose', 'python3', 'python3-pip', 'git']
        + ([] if (ansible_facts.packages.keys() | select('search', 'containerd') | list | length > 0) else ['docker.io'])
      }}
    state: present
    update_cache: yes
  tags: annotation

- name: Ensure Docker service is running
  service:
    name: docker
    state: started
    enabled: yes
  tags: annotation

- name: Add current user to docker group
  user:
    name: "{{ ansible_user_id | default(ansible_user) }}"
    groups: docker
    append: yes
  tags: annotation

- name: Create project directory
  file:
    path: "{{ ansible_user_dir }}/services/Annotation"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  tags: annotation

- name: Clone the Annotation repository
  git:
    repo: https://github.com/rejuve-bio/annotation-query-backend-general.git
    dest: "{{ ansible_user_dir }}/services/Annotation"
    version: feature/mork-support
    force: yes
  tags: annotation

- name: Modify requirements.txt
  replace:
    path: "{{ ansible_user_dir }}/services/Annotation/requirements.txt"
    regexp: '^biocypher>=0\.5\.4$'
    replace: 'biocypher==0.5.4\npandas>=1.3.0'
    backup: yes
  tags: annotation

- name: Create required data directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  with_items:
    - "{{ ansible_user_dir }}/services/Annotation/metta_data"
    - "{{ ansible_user_dir }}/services/Annotation/cypher_data"
  tags: annotation

- name: Copy pre-configured .env file to remote
  copy:
    src: templates/env.j2
    dest: "{{ ansible_user_dir }}/services/Annotation/.env"
    mode: '0640'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  tags: annotation

- name: Copy pre-configured docker-compose file to remote
  template:
    src: templates/docker-compose.yml.j2
    dest: "{{ ansible_user_dir }}/services/Annotation/docker-compose.yml"
    mode: '0640'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  tags: annotation

- name: Clean up existing containers
  shell: |
    docker-compose -f "{{ ansible_user_dir }}/services/Annotation/docker-compose.yml" down -v
  args:
    executable: /bin/bash
  ignore_errors: yes
  register: cleanup
  changed_when: "'Stopping' in cleanup.stdout"
  tags: annotation

- name: Build and start containers
  shell: |
    cd "{{ ansible_user_dir }}/services/Annotation"
    docker-compose up --build -d
  args:
    executable: /bin/bash
  register: compose_up
  retries: 2
  delay: 10
  until: compose_up.rc == 0
  tags: annotation

- name: Verify container status
  shell: |
    docker ps --filter "name=annotation_service" --format "{{ '{{.Names}} {{.Status}}' }}"
  register: container_status
  until: "'Up' in container_status.stdout"
  retries: 5
  delay: 10
  failed_when: "'Restarting' in container_status.stdout"
  tags: annotation

- name: Get container logs if verification fails
  shell: |
    docker logs annotation_annotation_service_1 --tail 50
  register: container_logs
  when: container_status.failed
  changed_when: false
  tags: annotation

- name: Display container logs if deployment failed
  debug:
    var: container_logs.stdout_lines
  when: container_status.failed
  tags: annotation

- name: Check Annotation service container status
  docker_container_info:
    name: annotation_annotation_service_1
  register: annotation_service
  ignore_errors: yes

- name: Print Annotation deployment status
  debug:
    msg: |
      {% if annotation_service.container is defined and annotation_service.container.State.Status == "running" %}
      ✅ Annotation service deployed successfully and running:
        - annotation_annotation_service_1: http://localhost:5800
      {% else %}
      ❌ Deployment incomplete: Annotation service is down.
        - annotation_annotation_service_1 is DOWN. Start with: docker-compose up -d annotation_annotation_service_1
      {% endif %}
