---
- name: Check prerequisites
  command: "python3 {{ playbook_dir }}/prerequisite_check.py"
  register: prerequisites_check
  failed_when: prerequisites_check.rc != 0
  changed_when: false
  become: no

- name: Gather installed packages facts
  ansible.builtin.package_facts:
    manager: auto
  become: no

- name: Create authentication service directory
  file:
    path: "{{ ansible_env.HOME }}/services/authentication-service"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  become: no

- name: Clone authentication service repository
  git:
    repo: "https://github.com/rejuve-bio/authentication-service.git"
    dest: "{{ ansible_env.HOME }}/services/authentication-service"
    version: main
    force: yes
  become: no

- name: Copy .env file
  copy:
    src: "templates/.env"
    dest: "{{ ansible_env.HOME }}/services/authentication-service/.env"
    mode: '0644'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  become: no

# Docker Compose command detection
- name: Check for available Docker Compose command
  block:
    - name: Check if docker compose v2 is available
      command: docker compose version
      register: docker_compose_v2_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Check if docker-compose v1 is available
      command: which docker-compose
      register: docker_compose_v1_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Set compose command fact
      set_fact:
        docker_compose_command: "{{ 'docker compose' if docker_compose_v2_check.rc == 0 else 'docker-compose' if docker_compose_v1_check.rc == 0 else '' }}"
      become: no

    - name: Fail if no Docker Compose found
      fail:
        msg: "No Docker Compose command found. Please install either docker-compose v1 or docker compose v2."
      when: docker_compose_command == ''
      become: no

- name: Clean up existing authentication service containers
  shell: |
    sg docker -c "cd {{ ansible_env.HOME }}/services/authentication-service && {{ docker_compose_command }} down -v --remove-orphans || true"
  args:
    executable: /bin/bash
  ignore_errors: yes
  become: no

- name: Build and start authentication service 
  shell: |
    sg docker -c "cd {{ ansible_env.HOME }}/services/authentication-service && {{ docker_compose_command }} up --build -d"
  args:
    executable: /bin/bash
  become: no
  ignore_errors: yes

- name: Wait for services to start
  pause:
    seconds: 10
  become: no

- name: Check web container status
  shell: |
    sg docker -c "docker inspect -f '{{ '{{.State.Status}}' }}' authentication-service-web-1 2>/dev/null || echo 'not-found'"
  register: web_container_status
  become: no

- name: Check database container status
  shell: |
    sg docker -c "docker inspect -f '{{ '{{.State.Status}}' }}' authentication-service-db-1 2>/dev/null || echo 'not-found'"
  register: db_container_status
  become: no

- name: Start web container if created but not running
  shell: |
    sg docker -c "docker start authentication-service-web-1"
  when: 
    - web_container_status.stdout != 'not-found'
    - web_container_status.stdout != 'running'
  become: no
  ignore_errors: yes

- name: Start database container if created but not running
  shell: |
    sg docker -c "docker start authentication-service-db-1"
  when: 
    - db_container_status.stdout != 'not-found'
    - db_container_status.stdout != 'running'
  become: no

- name: Wait after starting containers
  pause:
    seconds: 10
  when: 
    - (web_container_status.stdout != 'not-found' and web_container_status.stdout != 'running') or 
      (db_container_status.stdout != 'not-found' and db_container_status.stdout != 'running')
  become: no

- name: Check final web container status
  shell: |
    sg docker -c "docker inspect -f '{{ '{{.State.Status}}' }}' authentication-service-web-1 2>/dev/null || echo 'not-found'"
  register: final_web_status
  become: no

- name: Check final database container status
  shell: |
    sg docker -c "docker inspect -f '{{ '{{.State.Status}}' }}' authentication-service-db-1 2>/dev/null || echo 'not-found'"
  register: final_db_status
  become: no

- name: Get web container logs for debugging
  shell: |
    sg docker -c "docker logs authentication-service-web-1 --tail 20 2>/dev/null || echo 'Container not available for logs'"
  register: web_container_logs
  when: final_web_status.stdout != 'not-found'
  become: no

- name: Print authentication service deployment status
  debug:
    msg: |
      {% if final_web_status.stdout == 'running' and final_db_status.stdout == 'running' %}
      ✅ Authentication Service deployed successfully and running:
        - Web service: uthentication-service-web-1
        - PostgreSQL database: running (authentication-service-db-1)
        - Use 'cd {{ ansible_env.HOME }}/services/authentication-service && {{ docker_compose_command }} down' to stop services
      {% else %}
      ❌ Deployment incomplete: Some services are not running properly.
        - Web container status: {{ final_web_status.stdout }}
        - Database container status: {{ final_db_status.stdout }}
        {% if final_web_status.stdout != 'not-found' and final_web_status.stdout != 'running' %}
        - Web container logs: {{ web_container_logs.stdout_lines | join('\n') }}
        {% endif %}
        - Check detailed logs: cd {{ ansible_env.HOME }}/services/authentication-service && {{ docker_compose_command }} logs
        - Try manual start: docker start authentication-service-web-1 authentication-service-db-1
      {% endif %}
  become: no

- name: Display full service logs if deployment failed
  shell: |
    sg docker -c "cd {{ ansible_env.HOME }}/services/authentication-service && {{ docker_compose_command }} logs --tail 30"
  register: full_service_logs
  when: final_web_status.stdout != 'running' or final_db_status.stdout != 'running'
  changed_when: false
  become: no
  ignore_errors: yes

- name: Show full logs if services are down
  debug:
    var: full_service_logs.stdout_lines
  when: final_web_status.stdout != 'running' or final_db_status.stdout != 'running'
  become: no

