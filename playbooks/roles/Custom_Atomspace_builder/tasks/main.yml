---
- name: Disable CD-ROM repositories
  become: yes
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom:'
    line: '#\0'
    backrefs: yes
  when: ansible_facts['os_family'] == 'Debian'
  ignore_errors: yes

- name: Clean up conflicting Docker repository configurations
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list"
    state: absent
  ignore_errors: yes

- name: Clean up additional Docker repository files
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list.save"
    state: absent
  ignore_errors: yes

- name: Update apt cache 
  become: yes
  ansible.builtin.command: apt-get update --fix-missing
  register: apt_update
  failed_when: apt_update.rc != 0 and 'could not be read' not in apt_update.stderr
  changed_when: "'Reading package lists...' in apt_update.stdout"
  ignore_errors: yes

- name: Install Docker
  block:
    - name: Attempt standard Docker installation
      ansible.builtin.apt:
        name: 
          - docker.io
          - docker-compose
        state: present
        update_cache: yes
      register: docker_install
      become: yes
      ignore_errors: yes

    - name: Resolve conflicts for local installation
      block:
        - name: Remove conflicting containerd
          ansible.builtin.apt:
            name: containerd
            state: absent
            purge: yes
          become: yes
          ignore_errors: yes

        - name: Reinstall Docker after cleanup
          ansible.builtin.apt:
            name: 
              - docker.io
              - docker-compose
            state: present
            update_cache: yes
          become: yes
          ignore_errors: yes
      when: docker_install is failed and ansible_connection == 'local'

- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes
  become: yes
  ignore_errors: yes

- name: Add current user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user_id | default(ansible_user) }}"
    groups: docker
    append: yes
  become: yes
  ignore_errors: yes

- name: Set configuration variables
  ansible.builtin.set_fact:
    repo_url: "https://github.com/rejuve-bio/custom-atomspace-builder.git"
    install_dir: "{{ ansible_user_dir }}/services/custom-atomspace-builder"
    python_version: "3.8"

# Create installation directory 
- name: Ensure installation directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'
    recurse: yes
  ignore_errors: yes

- name: Clone repository 
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ install_dir }}"
    version: master
    clone: yes
    update: yes
    force: yes

# Set recursive permissions for the entire directory
- name: Set correct permissions for installation directory
  ansible.builtin.file:
    path: "{{ install_dir }}"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'
    recurse: yes
  ignore_errors: yes

- name: Create output directory
  ansible.builtin.file:
    path: "{{ install_dir }}/output/shared:output/"
    state: directory
    mode: '0775'
  ignore_errors: yes

- name: Configure config.yaml from template
  ansible.builtin.template:
    src: templates/config.yaml.j2
    dest: "{{ install_dir }}/config.yaml"
    mode: '0664'

# Create .env file with proper permissions
- name: Configure .env file from template
  ansible.builtin.template:
    src: templates/custom-atomspace-builder.env
    dest: "{{ install_dir }}/.env"
    mode: '0664'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"

# Explicitly create .docker directory with correct permissions
- name: Ensure .docker directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    state: directory
    mode: '0775'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"
  ignore_errors: yes

- name: Fix permissions for .docker recursively
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"
    mode: '0775'
    recurse: yes
  ignore_errors: yes

# Run make build as the correct user
- name: Run make build 
  ansible.builtin.command: make build
  args:
    chdir: "{{ install_dir }}"
  become: yes
  environment:
    HOME: "{{ install_dir }}"
  ignore_errors: yes

# Start HugeGraph container if it exists but not running
- name: Start HugeGraph container if it exists but not running
  community.docker.docker_container:
    name: hugegraph-atomspace
    state: started
  when:
    - hugegraph_service is defined
    - hugegraph_service.exists | default(false)
    - hugegraph_service.container.State.Running is defined
    - not hugegraph_service.container.State.Running
  ignore_errors: yes

- name: Start AtomSpace-API container if it exists but not running
  community.docker.docker_container:
    name: atomspace-api
    state: started
  when:
    - atomspace_service is defined
    - atomspace_service.exists | default(false)
    - atomspace_service.container.State.Running is defined
    - not atomspace_service.container.State.Running
  ignore_errors: yes

# Start Neo4j container if it exists but not running
- name: Start Neo4j container if it exists but not running
  community.docker.docker_container:
    name: neo4j-atomspace
    state: started
  when:
    - neo4j_service is defined
    - neo4j_service.exists | default(false)
    - neo4j_service.container.State.Running is defined
    - not neo4j_service.container.State.Running
  ignore_errors: yes
  
# Wait before checking container status
- name: Wait for containers to initialize
  ansible.builtin.wait_for:
    timeout: 10
  delegate_to: localhost

# Check HugeGraph container status
- name: Check HugeGraph container status
  community.docker.docker_container_info:
    name: hugegraph-atomspace
  register: hugegraph_service
  ignore_errors: yes

# Check AtomSpace-API container status
- name: Check AtomSpace-API container status
  community.docker.docker_container_info:
    name: atomspace-api
  register: atomspace_service
  ignore_errors: yes

# Check Neo4j container status
- name: Check Neo4j container status
  community.docker.docker_container_info:
    name: neo4j-atomspace
  register: neo4j_service
  ignore_errors: yes

# Print final deployment status
- name: Print final deployment status
  debug:
    msg: |
      {% if (hugegraph_service.container is defined and hugegraph_service.container.State.Status == "running") and
            (atomspace_service.container is defined and atomspace_service.container.State.Status == "running") and
            (neo4j_service.container is defined and neo4j_service.container.State.Status == "running") %}
      ✅ All services are up and running:
        - HugeGraph (hugegraph-atomspace)
        - AtomSpace-API (atomspace-api)
        - Neo4j (neo4j-atomspace)
      {% else %}
      ❌ Deployment incomplete: Some services are down.
        {% if hugegraph_service.container is not defined or hugegraph_service.container.State.Status != "running" %}
        - HugeGraph container is DOWN. Start it with: docker-compose up -d hugegraph-atomspace
        {% endif %}
        {% if atomspace_service.container is not defined or atomspace_service.container.State.Status != "running" %}
        - AtomSpace-API container is DOWN. Start it with: docker-compose up -d atomspace-api
        {% endif %}
        {% if neo4j_service.container is not defined or neo4j_service.container.State.Status != "running" %}
        - Neo4j container is DOWN. Start it with: docker-compose up -d neo4j-atomspace
        {% endif %}
      {% endif %}