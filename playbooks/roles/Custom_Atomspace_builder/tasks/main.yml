---
- name: Disable CD-ROM repositories
  become: yes
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom:'
    line: '#\0'
    backrefs: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Clean up conflicting Docker repository configurations
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list"
    state: absent
  ignore_errors: yes

- name: Clean up additional Docker repository files
  become: yes
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d/docker.list.save"
    state: absent
  ignore_errors: yes

- name: Update apt cache
  become: yes
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
  ignore_errors: yes

- name: Check if Docker is already working
  ansible.builtin.command: docker --version
  register: docker_check
  ignore_errors: yes
  changed_when: false

- name: Remove conflicting Docker packages (only if Docker is broken or forced)
  block:
    - name: Stop Docker service 
      ansible.builtin.service:
        name: docker
        state: stopped
      when: docker_check is failed or force_clean_install | default(false)

    - name: Remove conflicting packages
      ansible.builtin.apt:
        name:
          - containerd
          - containerd.io
          - docker
          - docker-engine
          - docker.io
        state: absent
        purge: yes
      when: docker_check is failed or force_clean_install | default(false)
      ignore_errors: yes
  when: docker_check is failed or force_clean_install | default(false)

- name: Install Docker and Docker Compose
  ansible.builtin.apt:
    name:
      - docker.io
      - docker-compose
    state: present
    update_cache: yes
  when: docker_check is failed or force_clean_install | default(false)

- name: Ensure Docker service is running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Add current user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user_id | default(ansible_user) }}"
    groups: docker
    append: yes

- name: Set configuration variables
  ansible.builtin.set_fact:
    repo_url: "https://github.com/rejuve-bio/custom-atomspace-builder.git"
    install_dir: "/home/{{ ansible_user_id | default(ansible_user) }}/Custom_Atomspace_builder"
    python_version: "3.8"

- name: Ensure installation directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'

- name: Clone repository
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ install_dir }}"
    version: master
    force: yes
    update: yes

- name: Set correct permissions recursively
  ansible.builtin.file:
    path: "{{ install_dir }}"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
    mode: '0775'
    recurse: yes

- name: Create output directory
  ansible.builtin.file:
    path: "{{ install_dir }}/output/shared:output/"
    state: directory
    mode: '0775'

- name: Configure config.yaml from template
  ansible.builtin.template:
    src: templates/config.yaml.j2
    dest: "{{ install_dir }}/config.yaml"
    mode: '0664'

- name: Configure .env file
  ansible.builtin.template:
    src: templates/custom-atomspace-builder.env
    dest: "{{ install_dir }}/.env"
    mode: '0664'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"

- name: Ensure .docker directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    state: directory
    mode: '0775'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"
    
- name: Fix permissions for .docker/buildx 
  ansible.builtin.file:
    path: "{{ install_dir }}/.docker"
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "docker"
    mode: '0775'
    recurse: yes  # Ensures all subdirs have correct permissions

- name: Run make build
  ansible.builtin.command: make build
  args:
    chdir: "{{ install_dir }}"
  become: no
  environment:
    HOME: "{{ install_dir }}"

- name: Print completion message
  ansible.builtin.debug:
    msg: "Custom Atomspace Builder deployed successfully! Docker is running."