---
#custom-atomspace-builder

- name: Check prerequisites
  command: "python3 {{ playbook_dir }}/prerequisite_check.py"
  register: prerequisites_check
  failed_when: prerequisites_check.rc != 0
  changed_when: false
  become: no

- name: Set configuration variables
  ansible.builtin.set_fact:
    repo_url: "https://github.com/rejuve-bio/custom-atomspace-builder.git"
    install_dir: "{{ ansible_env.HOME }}/services/custom-atomspace-builder"
    python_version: "3.8"
  become: no

# Create installation directory 
- name: Ensure installation directory exists
  ansible.builtin.file:
    path: "{{ install_dir }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0775'
    recurse: yes
  ignore_errors: yes
  become: no

- name: Clone repository 
  ansible.builtin.git:
    repo: "{{ repo_url }}"
    dest: "{{ install_dir }}"
    version: master
    clone: yes
    update: yes
    force: yes
  become: no

# Set recursive permissions for the entire directory
- name: Set correct permissions for installation directory
  ansible.builtin.file:
    path: "{{ install_dir }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0775'
  ignore_errors: yes
  become: no

- name: Create output directory
  ansible.builtin.file:
    path: "{{ install_dir }}/output/shared:output/"
    state: directory
    mode: '0775'
  ignore_errors: yes
  become: no

- name: Configure config.yaml from template
  ansible.builtin.template:
    src: templates/config.yaml.j2
    dest: "{{ install_dir }}/config.yaml"
    mode: '0664'
  become: no

# Create .env file with proper permissions
- name: Configure .env file from template
  ansible.builtin.template:
    src: templates/custom-atomspace-builder.env
    dest: "{{ install_dir }}/.env"
    mode: '0664'
    owner: "{{ ansible_user_id }}"
  become: no

- name: Run uv setup 
  command: uv run setup.py
  args:
    chdir: "{{ playbook_dir }}/.."
  become: no

# Docker Compose command detection
- name: Check for available Docker Compose command
  block:
    - name: Check if docker compose v2 is available
      command: docker compose version
      register: docker_compose_v2_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Check if docker-compose v1 is available
      command: which docker-compose
      register: docker_compose_v1_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Set compose command fact
      set_fact:
        docker_compose_command: "{{ 'docker compose' if docker_compose_v2_check.rc == 0 else 'docker-compose' if docker_compose_v1_check.rc == 0 else '' }}"
      become: no

    - name: Fail if no Docker Compose found
      fail:
        msg: "No Docker Compose command found. Please install either docker-compose v1 or docker compose v2."
      when: docker_compose_command == ''
      become: no

- name: Clean up existing containers
  shell: |
    sg docker -c "{{ docker_compose_command }} -f {{ install_dir }}/docker-compose.yml down -v"
  args:
    executable: /bin/bash
  ignore_errors: yes
  become: no

# Run make build as the correct user 
- name: Run make build
  ansible.builtin.command: make build
  args:
    chdir: "{{ install_dir }}"
  become: no
  ignore_errors: yes

# Start HugeGraph container if it exists but not running
- name: Start HugeGraph container if it exists but not running
  community.docker.docker_container:
    name: hugegraph-atomspace
    state: started
  when:
    - hugegraph_service is defined
    - hugegraph_service.exists | default(false)
    - hugegraph_service.container.State.Running is defined
    - not hugegraph_service.container.State.Running
  ignore_errors: yes
  become: no

# Start AtomSpace-API container if it exists but not running
- name: Start AtomSpace-API container if it exists but not running
  community.docker.docker_container:
    name: atomspace-api
    state: started
  when:
    - atomspace_service is defined
    - atomspace_service.exists | default(false)
    - atomspace_service.container.State.Running is defined
    - not atomspace_service.container.State.Running
  ignore_errors: yes
  become: no

# Start Neo4j container if it exists but not running
- name: Start Neo4j container if it exists but not running
  community.docker.docker_container:
    name: neo4j-atomspace
    state: started
  when:
    - neo4j_service is defined
    - neo4j_service.exists | default(false)
    - neo4j_service.container.State.Running is defined
    - not neo4j_service.container.State.Running
  ignore_errors: yes
  become: no
  
# Wait before checking container status
- name: Wait for containers to initialize
  ansible.builtin.wait_for:
    timeout: 10
  delegate_to: localhost
  become: no
  ignore_errors: yes

# Check HugeGraph container status
- name: Check HugeGraph container status
  community.docker.docker_container_info:
    name: hugegraph-atomspace
  register: hugegraph_service
  ignore_errors: yes
  become: no

# Check AtomSpace-API container status
- name: Check AtomSpace-API container status
  community.docker.docker_container_info:
    name: atomspace-api
  register: atomspace_service
  ignore_errors: yes
  become: no

# Check Neo4j container status
- name: Check Neo4j container status
  community.docker.docker_container_info:
    name: neo4j-atomspace
  register: neo4j_service
  ignore_errors: yes
  become: no

# Print final deployment status
- name: Print final deployment status
  debug:
    msg: |
      {% if (hugegraph_service.container is defined and hugegraph_service.container.State.Status == "running") and
            (atomspace_service.container is defined and atomspace_service.container.State.Status == "running") and
            (neo4j_service.container is defined and neo4j_service.container.State.Status == "running") %}
      ✅ All services are up and running:
        - HugeGraph (hugegraph-atomspace)
        - AtomSpace-API (atomspace-api)
        - Neo4j (neo4j-atomspace)
      {% else %}
      ❌ Deployment incomplete: Some services are down.
        {% if hugegraph_service.container is not defined or hugegraph_service.container.State.Status != "running" %}
        - HugeGraph container is DOWN. Start it with: {{ docker_compose_command }} up -d hugegraph-atomspace
        {% endif %}
        {% if atomspace_service.container is not defined or atomspace_service.container.State.Status != "running" %}
        - AtomSpace-API container is DOWN. Start it with: {{ docker_compose_command }} up -d atomspace-api
        {% endif %}
        {% if neo4j_service.container is not defined or neo4j_service.container.State.Status != "running" %}
        - Neo4j container is DOWN. Start it with: {{ docker_compose_command }} up -d neo4j-atomspace
        {% endif %}
      {% endif %}
  become: no