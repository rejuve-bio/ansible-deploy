# MORK Setup
- name: Check prerequisites
  command: "python3 {{ playbook_dir }}/prerequisite_check.py"
  register: prerequisites_check
  failed_when: prerequisites_check.rc != 0
  changed_when: false
  become: no 

- name: Gather installed packages facts
  ansible.builtin.package_facts:
    manager: auto
  become: no

- name: Create project directory
  file:
    path: "{{ ansible_env.HOME }}/services/MORK"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  become: no

# Docker Compose command detection 
- name: Check for available Docker Compose command
  block:
    - name: Check if docker compose v2 is available
      command: docker compose version
      register: docker_compose_v2_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Check if docker-compose v1 is available
      command: which docker-compose
      register: docker_compose_v1_check
      ignore_errors: yes
      changed_when: false
      become: no

    - name: Set compose command fact
      set_fact:
        docker_compose_command: "{{ 'docker compose' if docker_compose_v2_check.rc == 0 else 'docker-compose' if docker_compose_v1_check.rc == 0 else '' }}"
      become: no

    - name: Fail if no Docker Compose found
      fail:
        msg: "No Docker Compose command found. Please install either docker-compose v1 or docker compose v2."
      when: docker_compose_command == ''
      become: no

- name: Create data directory for MORK
  file:
    path: "{{ ansible_env.HOME }}/services/MORK/data"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id | default(ansible_user) }}"
    group: "{{ ansible_user_id | default(ansible_user) }}"
  become: no

- name: Clean up existing MORK container and free port
  block:
    - name: Stop and remove existing MORK container
      shell: |
        sg docker -c "docker stop mork_container || true && docker rm mork_container || true"
      args:
        executable: /bin/bash
      ignore_errors: yes
      become: no

    - name: Free Mork port
      shell: |
        sg docker -c "docker ps -q --filter 'publish=8231' | xargs -r docker stop && \
        docker ps -a -q --filter 'publish=8231' | xargs -r docker rm"
      args:
        executable: /bin/bash
      ignore_errors: yes
      become: no
      changed_when: false

  always:
    - name: Verify port 8231 is free
      wait_for:
        port: 8231
        state: stopped
        timeout: 10
      become: no
      ignore_errors: yes

- name: Pull latest MORK image
  shell: |
    sg docker -c "docker pull abdum1964/mork_pathmap:latest"
  args:
    executable: /bin/bash
  become: no

- name: Run MORK container from latest image
  shell: |
    sg docker -c "docker run -d --name mork_container \
    -p 8231:8231 \
    -v \"{{ ansible_env.HOME }}/services/MORK/data:/shared/output\" \
    abdum1964/mork_pathmap:latest"
  args:
    executable: /bin/bash
  become: no

- name: Verify container is running
  shell: |
    sg docker -c "docker ps -f \"name=mork_container\" --format \"{{ '{{.Names}} {{.Status}}' }}\""
  register: container_status
  until: "'Up' in container_status.stdout"
  retries: 5
  delay: 5
  become: no
  ignore_errors: yes

- name: Get container logs if verification fails
  shell: |
    sg docker -c "docker logs mork_container --tail 50"
  register: container_logs
  when: container_status.failed
  changed_when: false
  become: no
  ignore_errors: yes

- name: Display container logs if deployment failed
  debug:
    var: container_logs.stdout_lines
  when: container_status.failed
  become: no
  ignore_errors: yes

- name: Check MORK container status
  docker_container_info:
    name: mork_container
  register: mork_service
  ignore_errors: yes
  become: no
  ignore_errors: yes

- name: Print MORK deployment status
  debug:
    msg: |
      {% if mork_service.container is defined and mork_service.container.State.Status == "running" %}
      ✅ MORK service deployed successfully and running:
        - mork_container: http://localhost:8231
      {% else %}
      ❌ Deployment incomplete: MORK service is down.
        - mork_container is DOWN. Start with: docker start mork_container
      {% endif %}
  become: no